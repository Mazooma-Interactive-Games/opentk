#region License
//
// ES11Obsolete.cs
//
// Author:
//       Stefanos A. <stapostol@gmail.com>
//
// Copyright (c) 2006-2014 Stefanos Apostolopoulos
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
#endregion

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.ES11
{
    partial class GL
    {
        /// <summary>[requires: v1.0]
        /// Return the coefficients of the specified clipping plane
        /// </summary>
        /// <param name="plane">
        /// <para>
        /// Specifies a clipping plane. The number of clipping planes depends on the implementation, but at least six clipping planes are supported. They are identified by symbolic names of the form GL_CLIP_PLANE where i ranges from 0 to the value of GL_MAX_CLIP_PLANES - 1.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetClipPlanef")]
        [CLSCompliant(false)]
        [Obsolete("Use GetClipPlane(..., float[]) instead. This method will return incorrect results.")]
        public static Single GetClipPlane(OpenTK.Graphics.ES11.All plane) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Return the coefficients of the specified clipping plane
        /// </summary>
        /// <param name="plane">
        /// <para>
        /// Specifies a clipping plane. The number of clipping planes depends on the implementation, but at least six clipping planes are supported. They are identified by symbolic names of the form GL_CLIP_PLANE where i ranges from 0 to the value of GL_MAX_CLIP_PLANES - 1.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetClipPlanex")]
        [CLSCompliant(false)]
        [Obsolete("Use GetClipPlane(..., int[]) instead. This method will return incorrect results.")]
        public static int GetClipPlanex(OpenTK.Graphics.ES11.All plane) { throw new NotImplementedException(); }

        #region Xamarin.Android compatibility

        /// <summary>[requires: QCOM_driver_control]</summary>
        /// <param name="driverControl"></param>
        [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glDisableDriverControlQCOM")]
        [CLSCompliant(false)]
        public static void DisableDriverControlQCOM(Int32 driverControl) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_driver_control]</summary>
        /// <param name="driverControl"></param>
        [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glDisableDriverControlQCOM")]
        [CLSCompliant(false)]
        public static void DisableDriverControlQCOM(UInt32 driverControl) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_driver_control]</summary>
        /// <param name="driverControl"></param>
        [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glEnableDriverControlQCOM")]
        [CLSCompliant(false)]
        public static void EnableDriverControlQCOM(Int32 driverControl) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_driver_control]</summary>
        /// <param name="driverControl"></param>
        [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glEnableDriverControlQCOM")]
        [CLSCompliant(false)]
        public static void EnableDriverControlQCOM(UInt32 driverControl) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_tiled_rendering]</summary>
        /// <param name="preserveMask"></param>
        [AutoGenerated(Category = "QCOM_tiled_rendering", Version = "", EntryPoint = "glEndTilingQCOM")]
        [CLSCompliant(false)]
        public static void EndTilingQCOM(Int32 preserveMask) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_tiled_rendering]</summary>
        /// <param name="preserveMask"></param>
        [AutoGenerated(Category = "QCOM_tiled_rendering", Version = "", EntryPoint = "glEndTilingQCOM")]
        [CLSCompliant(false)]
        public static void EndTilingQCOM(UInt32 preserveMask) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="target"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBufferPointervQCOM")]
        public static void ExtGetBufferPointervQCOM(OpenTK.Graphics.ES11.All target, [OutAttribute] IntPtr @params) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="target"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBufferPointervQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetBufferPointervQCOM<T1>(OpenTK.Graphics.ES11.All target, [InAttribute, OutAttribute] T1[] @params)
            where T1 : struct
        { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="target"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBufferPointervQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetBufferPointervQCOM<T1>(OpenTK.Graphics.ES11.All target, [InAttribute, OutAttribute] T1[,] @params)
            where T1 : struct
        { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="target"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBufferPointervQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetBufferPointervQCOM<T1>(OpenTK.Graphics.ES11.All target, [InAttribute, OutAttribute] T1[,,] @params)
            where T1 : struct
        { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="target"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBufferPointervQCOM")]
        public static void ExtGetBufferPointervQCOM<T1>(OpenTK.Graphics.ES11.All target, [InAttribute, OutAttribute] ref T1 @params)
            where T1 : struct
        { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="buffers">[length: maxBuffers]</param>
        /// <param name="maxBuffers"></param>
        /// <param name="numBuffers">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetBuffersQCOM([OutAttribute] Int32[] buffers, Int32 maxBuffers, [OutAttribute] Int32[] numBuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="buffers">[length: maxBuffers]</param>
        /// <param name="maxBuffers"></param>
        /// <param name="numBuffers">[length: 1]</param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetBuffersQCOM([OutAttribute] Int32[] buffers, Int32 maxBuffers, [OutAttribute] out Int32 numBuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="buffers">[length: maxBuffers]</param>
        /// <param name="maxBuffers"></param>
        /// <param name="numBuffers">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetBuffersQCOM(ref Int32 buffers, Int32 maxBuffers, ref Int32 numBuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="buffers">[length: maxBuffers]</param>
        /// <param name="maxBuffers"></param>
        /// <param name="numBuffers">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
        [CLSCompliant(false)]
        public static unsafe void ExtGetBuffersQCOM([OutAttribute] Int32* buffers, Int32 maxBuffers, [OutAttribute] Int32* numBuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="buffers">[length: maxBuffers]</param>
        /// <param name="maxBuffers"></param>
        /// <param name="numBuffers">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetBuffersQCOM([OutAttribute] UInt32[] buffers, Int32 maxBuffers, [OutAttribute] Int32[] numBuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="buffers">[length: maxBuffers]</param>
        /// <param name="maxBuffers"></param>
        /// <param name="numBuffers">[length: 1]</param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetBuffersQCOM([OutAttribute] UInt32[] buffers, Int32 maxBuffers, [OutAttribute] out Int32 numBuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="buffers">[length: maxBuffers]</param>
        /// <param name="maxBuffers"></param>
        /// <param name="numBuffers">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetBuffersQCOM(ref UInt32 buffers, Int32 maxBuffers, ref Int32 numBuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="buffers">[length: maxBuffers]</param>
        /// <param name="maxBuffers"></param>
        /// <param name="numBuffers">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
        [CLSCompliant(false)]
        public static unsafe void ExtGetBuffersQCOM([OutAttribute] UInt32* buffers, Int32 maxBuffers, [OutAttribute] Int32* numBuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="framebuffers">[length: maxFramebuffers]</param>
        /// <param name="maxFramebuffers"></param>
        /// <param name="numFramebuffers">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetFramebuffersQCOM([OutAttribute] Int32[] framebuffers, Int32 maxFramebuffers, [OutAttribute] Int32[] numFramebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="framebuffers">[length: maxFramebuffers]</param>
        /// <param name="maxFramebuffers"></param>
        /// <param name="numFramebuffers">[length: 1]</param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetFramebuffersQCOM([OutAttribute] Int32[] framebuffers, Int32 maxFramebuffers, [OutAttribute] out Int32 numFramebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="framebuffers">[length: maxFramebuffers]</param>
        /// <param name="maxFramebuffers"></param>
        /// <param name="numFramebuffers">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetFramebuffersQCOM(ref Int32 framebuffers, Int32 maxFramebuffers, ref Int32 numFramebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="framebuffers">[length: maxFramebuffers]</param>
        /// <param name="maxFramebuffers"></param>
        /// <param name="numFramebuffers">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
        [CLSCompliant(false)]
        public static unsafe void ExtGetFramebuffersQCOM([OutAttribute] Int32* framebuffers, Int32 maxFramebuffers, [OutAttribute] Int32* numFramebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="framebuffers">[length: maxFramebuffers]</param>
        /// <param name="maxFramebuffers"></param>
        /// <param name="numFramebuffers">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetFramebuffersQCOM([OutAttribute] UInt32[] framebuffers, Int32 maxFramebuffers, [OutAttribute] Int32[] numFramebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="framebuffers">[length: maxFramebuffers]</param>
        /// <param name="maxFramebuffers"></param>
        /// <param name="numFramebuffers">[length: 1]</param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetFramebuffersQCOM([OutAttribute] UInt32[] framebuffers, Int32 maxFramebuffers, [OutAttribute] out Int32 numFramebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="framebuffers">[length: maxFramebuffers]</param>
        /// <param name="maxFramebuffers"></param>
        /// <param name="numFramebuffers">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetFramebuffersQCOM(ref UInt32 framebuffers, Int32 maxFramebuffers, ref Int32 numFramebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="framebuffers">[length: maxFramebuffers]</param>
        /// <param name="maxFramebuffers"></param>
        /// <param name="numFramebuffers">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
        [CLSCompliant(false)]
        public static unsafe void ExtGetFramebuffersQCOM([OutAttribute] UInt32* framebuffers, Int32 maxFramebuffers, [OutAttribute] Int32* numFramebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="program"></param>
        /// <param name="shadertype"></param>
        /// <param name="source"></param>
        /// <param name="length"></param>
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetProgramBinarySourceQCOM(Int32 program, OpenTK.Graphics.ES11.All shadertype, string source, [OutAttribute] Int32[] length) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="program"></param>
        /// <param name="shadertype"></param>
        /// <param name="source"></param>
        /// <param name="length"></param>
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
        [CLSCompliant(false)]
        [Obsolete("Use GL.Qcom method instead")]
        public static void ExtGetProgramBinarySourceQCOM(Int32 program, OpenTK.Graphics.ES11.All shadertype, string source, ref Int32 length) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="program"></param>
        /// <param name="shadertype"></param>
        /// <param name="source"></param>
        /// <param name="length"></param>
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
        [CLSCompliant(false)]
        [Obsolete("Use GL.Qcom method instead")]
        public static unsafe void ExtGetProgramBinarySourceQCOM(Int32 program, OpenTK.Graphics.ES11.All shadertype, string source, [OutAttribute] Int32* length) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="program"></param>
        /// <param name="shadertype"></param>
        /// <param name="source"></param>
        /// <param name="length"></param>
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
        [CLSCompliant(false)]
        [Obsolete("Use GL.Qcom method instead")]
        public static void ExtGetProgramBinarySourceQCOM(UInt32 program, OpenTK.Graphics.ES11.All shadertype, string source, [OutAttribute] Int32[] length) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="program"></param>
        /// <param name="shadertype"></param>
        /// <param name="source"></param>
        /// <param name="length"></param>
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
        [CLSCompliant(false)]
        [Obsolete("Use GL.Qcom method instead")]
        public static void ExtGetProgramBinarySourceQCOM(UInt32 program, OpenTK.Graphics.ES11.All shadertype, string source, ref Int32 length) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="program"></param>
        /// <param name="shadertype"></param>
        /// <param name="source"></param>
        /// <param name="length"></param>
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
        [CLSCompliant(false)]
        [Obsolete("Use GL.Qcom method instead")]
        public static unsafe void ExtGetProgramBinarySourceQCOM(UInt32 program, OpenTK.Graphics.ES11.All shadertype, string source, [OutAttribute] Int32* length) { throw new NotImplementedException(); }


        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="programs">[length: maxPrograms]</param>
        /// <param name="maxPrograms"></param>
        /// <param name="numPrograms">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetProgramsQCOM([OutAttribute] Int32[] programs, Int32 maxPrograms, [OutAttribute] Int32[] numPrograms) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="programs">[length: maxPrograms]</param>
        /// <param name="maxPrograms"></param>
        /// <param name="numPrograms">[length: 1]</param>
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetProgramsQCOM([OutAttribute] Int32[] programs, Int32 maxPrograms, ref Int32 numPrograms) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="programs">[length: maxPrograms]</param>
        /// <param name="maxPrograms"></param>
        /// <param name="numPrograms">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetProgramsQCOM(ref Int32 programs, Int32 maxPrograms, ref Int32 numPrograms) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="programs">[length: maxPrograms]</param>
        /// <param name="maxPrograms"></param>
        /// <param name="numPrograms">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
        [CLSCompliant(false)]
        public static unsafe void ExtGetProgramsQCOM([OutAttribute] Int32* programs, Int32 maxPrograms, [OutAttribute] Int32* numPrograms) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="programs">[length: maxPrograms]</param>
        /// <param name="maxPrograms"></param>
        /// <param name="numPrograms">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetProgramsQCOM([OutAttribute] UInt32[] programs, Int32 maxPrograms, [OutAttribute] Int32[] numPrograms) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="programs">[length: maxPrograms]</param>
        /// <param name="maxPrograms"></param>
        /// <param name="numPrograms">[length: 1]</param>
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetProgramsQCOM([OutAttribute] UInt32[] programs, Int32 maxPrograms, ref Int32 numPrograms) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="programs">[length: maxPrograms]</param>
        /// <param name="maxPrograms"></param>
        /// <param name="numPrograms">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetProgramsQCOM(ref UInt32 programs, Int32 maxPrograms, ref Int32 numPrograms) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="programs">[length: maxPrograms]</param>
        /// <param name="maxPrograms"></param>
        /// <param name="numPrograms">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
        [CLSCompliant(false)]
        public static unsafe void ExtGetProgramsQCOM([OutAttribute] UInt32* programs, Int32 maxPrograms, [OutAttribute] Int32* numPrograms) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
        /// <param name="maxRenderbuffers"></param>
        /// <param name="numRenderbuffers">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetRenderbuffersQCOM([OutAttribute] Int32[] renderbuffers, Int32 maxRenderbuffers, [OutAttribute] Int32[] numRenderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
        /// <param name="maxRenderbuffers"></param>
        /// <param name="numRenderbuffers">[length: 1]</param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetRenderbuffersQCOM([OutAttribute] Int32[] renderbuffers, Int32 maxRenderbuffers, ref Int32 numRenderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
        /// <param name="maxRenderbuffers"></param>
        /// <param name="numRenderbuffers">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetRenderbuffersQCOM(ref Int32 renderbuffers, Int32 maxRenderbuffers, ref Int32 numRenderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
        /// <param name="maxRenderbuffers"></param>
        /// <param name="numRenderbuffers">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
        [CLSCompliant(false)]
        public static unsafe void ExtGetRenderbuffersQCOM([OutAttribute] Int32* renderbuffers, Int32 maxRenderbuffers, [OutAttribute] Int32* numRenderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
        /// <param name="maxRenderbuffers"></param>
        /// <param name="numRenderbuffers">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetRenderbuffersQCOM([OutAttribute] UInt32[] renderbuffers, Int32 maxRenderbuffers, [OutAttribute] Int32[] numRenderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
        /// <param name="maxRenderbuffers"></param>
        /// <param name="numRenderbuffers">[length: 1]</param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetRenderbuffersQCOM([OutAttribute] UInt32[] renderbuffers, Int32 maxRenderbuffers, ref Int32 numRenderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
        /// <param name="maxRenderbuffers"></param>
        /// <param name="numRenderbuffers">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetRenderbuffersQCOM(ref UInt32 renderbuffers, Int32 maxRenderbuffers, ref Int32 numRenderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
        /// <param name="maxRenderbuffers"></param>
        /// <param name="numRenderbuffers">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
        [CLSCompliant(false)]
        public static unsafe void ExtGetRenderbuffersQCOM([OutAttribute] UInt32* renderbuffers, Int32 maxRenderbuffers, [OutAttribute] Int32* numRenderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="shaders">[length: maxShaders]</param>
        /// <param name="maxShaders"></param>
        /// <param name="numShaders">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetShadersQCOM([OutAttribute] Int32[] shaders, Int32 maxShaders, [OutAttribute] Int32[] numShaders) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="shaders">[length: maxShaders]</param>
        /// <param name="maxShaders"></param>
        /// <param name="numShaders">[length: 1]</param>
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetShadersQCOM([OutAttribute] Int32[] shaders, Int32 maxShaders, ref Int32 numShaders) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="shaders">[length: maxShaders]</param>
        /// <param name="maxShaders"></param>
        /// <param name="numShaders">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetShadersQCOM(ref Int32 shaders, Int32 maxShaders, ref Int32 numShaders) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="shaders">[length: maxShaders]</param>
        /// <param name="maxShaders"></param>
        /// <param name="numShaders">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
        [CLSCompliant(false)]
        public static unsafe void ExtGetShadersQCOM([OutAttribute] Int32* shaders, Int32 maxShaders, [OutAttribute] Int32* numShaders) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="shaders">[length: maxShaders]</param>
        /// <param name="maxShaders"></param>
        /// <param name="numShaders">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetShadersQCOM([OutAttribute] UInt32[] shaders, Int32 maxShaders, [OutAttribute] Int32[] numShaders) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="shaders">[length: maxShaders]</param>
        /// <param name="maxShaders"></param>
        /// <param name="numShaders">[length: 1]</param>
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetShadersQCOM([OutAttribute] UInt32[] shaders, Int32 maxShaders, ref Int32 numShaders) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="shaders">[length: maxShaders]</param>
        /// <param name="maxShaders"></param>
        /// <param name="numShaders">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetShadersQCOM(ref UInt32 shaders, Int32 maxShaders, ref Int32 numShaders) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="shaders">[length: maxShaders]</param>
        /// <param name="maxShaders"></param>
        /// <param name="numShaders">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
        [CLSCompliant(false)]
        public static unsafe void ExtGetShadersQCOM([OutAttribute] UInt32* shaders, Int32 maxShaders, [OutAttribute] Int32* numShaders) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="texture"></param>
        /// <param name="face"></param>
        /// <param name="level"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexLevelParameterivQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetTexLevelParameterivQCOM(Int32 texture, OpenTK.Graphics.ES11.All face, Int32 level, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="texture"></param>
        /// <param name="face"></param>
        /// <param name="level"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexLevelParameterivQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetTexLevelParameterivQCOM(Int32 texture, OpenTK.Graphics.ES11.All face, Int32 level, OpenTK.Graphics.ES11.All pname, ref Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="texture"></param>
        /// <param name="face"></param>
        /// <param name="level"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexLevelParameterivQCOM")]
        [CLSCompliant(false)]
        public static unsafe void ExtGetTexLevelParameterivQCOM(Int32 texture, OpenTK.Graphics.ES11.All face, Int32 level, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="texture"></param>
        /// <param name="face"></param>
        /// <param name="level"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexLevelParameterivQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetTexLevelParameterivQCOM(UInt32 texture, OpenTK.Graphics.ES11.All face, Int32 level, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="texture"></param>
        /// <param name="face"></param>
        /// <param name="level"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexLevelParameterivQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetTexLevelParameterivQCOM(UInt32 texture, OpenTK.Graphics.ES11.All face, Int32 level, OpenTK.Graphics.ES11.All pname, ref Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="texture"></param>
        /// <param name="face"></param>
        /// <param name="level"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexLevelParameterivQCOM")]
        [CLSCompliant(false)]
        public static unsafe void ExtGetTexLevelParameterivQCOM(UInt32 texture, OpenTK.Graphics.ES11.All face, Int32 level, OpenTK.Graphics.ES11.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="target"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="texels"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexSubImageQCOM")]
        public static void ExtGetTexSubImageQCOM(OpenTK.Graphics.ES11.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [OutAttribute] IntPtr texels) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="target"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="texels"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexSubImageQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetTexSubImageQCOM<T10>(OpenTK.Graphics.ES11.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T10[] texels)
            where T10 : struct
        { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="target"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="texels"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexSubImageQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetTexSubImageQCOM<T10>(OpenTK.Graphics.ES11.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T10[,] texels)
            where T10 : struct
        { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="target"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="texels"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexSubImageQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetTexSubImageQCOM<T10>(OpenTK.Graphics.ES11.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T10[,,] texels)
            where T10 : struct
        { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="target"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="texels"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexSubImageQCOM")]
        public static void ExtGetTexSubImageQCOM<T10>(OpenTK.Graphics.ES11.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] ref T10 texels)
            where T10 : struct
        { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="textures"></param>
        /// <param name="maxTextures"></param>
        /// <param name="numTextures"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexturesQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetTexturesQCOM([OutAttribute] Int32[] textures, Int32 maxTextures, [OutAttribute] Int32[] numTextures) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="textures"></param>
        /// <param name="maxTextures"></param>
        /// <param name="numTextures"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexturesQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetTexturesQCOM(ref Int32 textures, Int32 maxTextures, ref Int32 numTextures) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="textures"></param>
        /// <param name="maxTextures"></param>
        /// <param name="numTextures"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexturesQCOM")]
        [CLSCompliant(false)]
        public static unsafe void ExtGetTexturesQCOM([OutAttribute] Int32* textures, Int32 maxTextures, [OutAttribute] Int32* numTextures) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="textures"></param>
        /// <param name="maxTextures"></param>
        /// <param name="numTextures"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexturesQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetTexturesQCOM([OutAttribute] UInt32[] textures, Int32 maxTextures, [OutAttribute] Int32[] numTextures) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="textures"></param>
        /// <param name="maxTextures"></param>
        /// <param name="numTextures"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexturesQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetTexturesQCOM(ref UInt32 textures, Int32 maxTextures, ref Int32 numTextures) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="textures"></param>
        /// <param name="maxTextures"></param>
        /// <param name="numTextures"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexturesQCOM")]
        [CLSCompliant(false)]
        public static unsafe void ExtGetTexturesQCOM([OutAttribute] UInt32* textures, Int32 maxTextures, [OutAttribute] Int32* numTextures) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="program"></param>
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtIsProgramBinaryQCOM")]
        [CLSCompliant(false)]
        public static bool ExtIsProgramBinaryQCOM(Int32 program) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="program"></param>
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtIsProgramBinaryQCOM")]
        [CLSCompliant(false)]
        public static bool ExtIsProgramBinaryQCOM(UInt32 program) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="target"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtTexObjectStateOverrideiQCOM")]
        public static void ExtTexObjectStateOverrideiQCOM(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, Int32 param) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_driver_control]</summary>
        /// <param name="num"></param>
        /// <param name="size"></param>
        /// <param name="driverControls">[length: size]</param>
        [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlsQCOM")]
        [CLSCompliant(false)]
        public static void GetDriverControlsQCOM([OutAttribute] Int32[] num, Int32 size, [OutAttribute] Int32[] driverControls) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_driver_control]</summary>
        /// <param name="num"></param>
        /// <param name="size"></param>
        /// <param name="driverControls">[length: size]</param>
        [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlsQCOM")]
        [CLSCompliant(false)]
        public static void GetDriverControlsQCOM([OutAttribute] Int32[] num, Int32 size, [OutAttribute] UInt32[] driverControls) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_driver_control]</summary>
        /// <param name="num"></param>
        /// <param name="size"></param>
        /// <param name="driverControls">[length: size]</param>
        [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlsQCOM")]
        [CLSCompliant(false)]
        public static void GetDriverControlsQCOM([OutAttribute] out Int32 num, Int32 size, [OutAttribute] out Int32 driverControls) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_driver_control]</summary>
        /// <param name="num"></param>
        /// <param name="size"></param>
        /// <param name="driverControls">[length: size]</param>
        [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlsQCOM")]
        [CLSCompliant(false)]
        public static void GetDriverControlsQCOM([OutAttribute] out Int32 num, Int32 size, [OutAttribute] out UInt32 driverControls) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_driver_control]</summary>
        /// <param name="num"></param>
        /// <param name="size"></param>
        /// <param name="driverControls">[length: size]</param>
        [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlsQCOM")]
        [CLSCompliant(false)]
        public static unsafe void GetDriverControlsQCOM([OutAttribute] Int32* num, Int32 size, [OutAttribute] Int32* driverControls) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_driver_control]</summary>
        /// <param name="num"></param>
        /// <param name="size"></param>
        /// <param name="driverControls">[length: size]</param>
        [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlsQCOM")]
        [CLSCompliant(false)]
        public static unsafe void GetDriverControlsQCOM([OutAttribute] Int32* num, Int32 size, [OutAttribute] UInt32* driverControls) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_driver_control]</summary>
        /// <param name="driverControl"></param>
        /// <param name="bufSize"></param>
        /// <param name="length"></param>
        /// <param name="driverControlString">[length: bufSize]</param>
        [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlStringQCOM")]
        [CLSCompliant(false)]
        public static void GetDriverControlStringQCOM(Int32 driverControl, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder driverControlString) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_driver_control]</summary>
        /// <param name="driverControl"></param>
        /// <param name="bufSize"></param>
        /// <param name="length"></param>
        /// <param name="driverControlString">[length: bufSize]</param>
        [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlStringQCOM")]
        [CLSCompliant(false)]
        public static void GetDriverControlStringQCOM(Int32 driverControl, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder driverControlString) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_driver_control]</summary>
        /// <param name="driverControl"></param>
        /// <param name="bufSize"></param>
        /// <param name="length"></param>
        /// <param name="driverControlString">[length: bufSize]</param>
        [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlStringQCOM")]
        [CLSCompliant(false)]
        public static unsafe void GetDriverControlStringQCOM(Int32 driverControl, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder driverControlString) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_driver_control]</summary>
        /// <param name="driverControl"></param>
        /// <param name="bufSize"></param>
        /// <param name="length"></param>
        /// <param name="driverControlString">[length: bufSize]</param>
        [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlStringQCOM")]
        [CLSCompliant(false)]
        public static void GetDriverControlStringQCOM(UInt32 driverControl, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder driverControlString) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_driver_control]</summary>
        /// <param name="driverControl"></param>
        /// <param name="bufSize"></param>
        /// <param name="length"></param>
        /// <param name="driverControlString">[length: bufSize]</param>
        [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlStringQCOM")]
        [CLSCompliant(false)]
        public static void GetDriverControlStringQCOM(UInt32 driverControl, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder driverControlString) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_driver_control]</summary>
        /// <param name="driverControl"></param>
        /// <param name="bufSize"></param>
        /// <param name="length"></param>
        /// <param name="driverControlString">[length: bufSize]</param>
        [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlStringQCOM")]
        [CLSCompliant(false)]
        public static unsafe void GetDriverControlStringQCOM(UInt32 driverControl, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder driverControlString) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_tiled_rendering]</summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="preserveMask"></param>
        [AutoGenerated(Category = "QCOM_tiled_rendering", Version = "", EntryPoint = "glStartTilingQCOM")]
        [CLSCompliant(false)]
        public static void StartTilingQCOM(Int32 x, Int32 y, Int32 width, Int32 height, Int32 preserveMask) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_tiled_rendering]</summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="preserveMask"></param>
        [AutoGenerated(Category = "QCOM_tiled_rendering", Version = "", EntryPoint = "glStartTilingQCOM")]
        [CLSCompliant(false)]
        public static void StartTilingQCOM(UInt32 x, UInt32 y, UInt32 width, UInt32 height, UInt32 preserveMask) { throw new NotImplementedException(); }

        /// <summary>[requires: IMG_user_clip_plane]
        /// Specify a plane against which all geometry is clipped
        /// </summary>
        /// <param name="p"> 
        /// Specifies which clipping plane is being positioned. Symbolic names of the form ClipPlanei, where i is an integer between 0 and MaxClipPlanes - 1, are accepted.
        /// </param>
        /// <param name="eqn">[length: 4] 
        /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
        /// </param>
        [AutoGenerated(Category = "IMG_user_clip_plane", Version = "", EntryPoint = "glClipPlanefIMG")]
        [CLSCompliant(false)]
        public static void ClipPlanefIMG(OpenTK.Graphics.ES11.All p, Single[] eqn) { throw new NotImplementedException(); }

        /// <summary>[requires: IMG_user_clip_plane]
        /// Specify a plane against which all geometry is clipped
        /// </summary>
        /// <param name="p"> 
        /// Specifies which clipping plane is being positioned. Symbolic names of the form ClipPlanei, where i is an integer between 0 and MaxClipPlanes - 1, are accepted.
        /// </param>
        /// <param name="eqn">[length: 4] 
        /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
        /// </param>
        [AutoGenerated(Category = "IMG_user_clip_plane", Version = "", EntryPoint = "glClipPlanefIMG")]
        [CLSCompliant(false)]
        public static void ClipPlanefIMG(OpenTK.Graphics.ES11.All p, ref Single eqn) { throw new NotImplementedException(); }

        /// <summary>[requires: IMG_user_clip_plane]
        /// Specify a plane against which all geometry is clipped
        /// </summary>
        /// <param name="p"> 
        /// Specifies which clipping plane is being positioned. Symbolic names of the form ClipPlanei, where i is an integer between 0 and MaxClipPlanes - 1, are accepted.
        /// </param>
        /// <param name="eqn">[length: 4] 
        /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
        /// </param>
        [AutoGenerated(Category = "IMG_user_clip_plane", Version = "", EntryPoint = "glClipPlanefIMG")]
        [CLSCompliant(false)]
        public static unsafe void ClipPlanefIMG(OpenTK.Graphics.ES11.All p, Single* eqn) { throw new NotImplementedException(); }

        /// <summary>[requires: IMG_user_clip_plane]</summary>
        /// <param name="p"></param>
        /// <param name="eqn">[length: 4]</param>
        [AutoGenerated(Category = "IMG_user_clip_plane", Version = "", EntryPoint = "glClipPlanexIMG")]
        [CLSCompliant(false)]
        public static void ClipPlanexIMG(OpenTK.Graphics.ES11.All p, int[] eqn) { throw new NotImplementedException(); }

        /// <summary>[requires: IMG_user_clip_plane]</summary>
        /// <param name="p"></param>
        /// <param name="eqn">[length: 4]</param>
        [AutoGenerated(Category = "IMG_user_clip_plane", Version = "", EntryPoint = "glClipPlanexIMG")]
        [CLSCompliant(false)]
        public static void ClipPlanexIMG(OpenTK.Graphics.ES11.All p, ref int eqn) { throw new NotImplementedException(); }

        /// <summary>[requires: IMG_user_clip_plane]</summary>
        /// <param name="p"></param>
        /// <param name="eqn">[length: 4]</param>
        [AutoGenerated(Category = "IMG_user_clip_plane", Version = "", EntryPoint = "glClipPlanexIMG")]
        [CLSCompliant(false)]
        public static unsafe void ClipPlanexIMG(OpenTK.Graphics.ES11.All p, int* eqn) { throw new NotImplementedException(); }

        /// <summary>[requires: IMG_multisampled_render_to_texture]</summary>
        /// <param name="target"></param>
        /// <param name="attachment"></param>
        /// <param name="textarget"></param>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="samples"></param>
        [AutoGenerated(Category = "IMG_multisampled_render_to_texture", Version = "", EntryPoint = "glFramebufferTexture2DMultisampleIMG")]
        [CLSCompliant(false)]
        public static void FramebufferTexture2DMultisampleIMG(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All attachment, OpenTK.Graphics.ES11.All textarget, Int32 texture, Int32 level, Int32 samples) { throw new NotImplementedException(); }

        /// <summary>[requires: IMG_multisampled_render_to_texture]</summary>
        /// <param name="target"></param>
        /// <param name="attachment"></param>
        /// <param name="textarget"></param>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="samples"></param>
        [AutoGenerated(Category = "IMG_multisampled_render_to_texture", Version = "", EntryPoint = "glFramebufferTexture2DMultisampleIMG")]
        [CLSCompliant(false)]
        public static void FramebufferTexture2DMultisampleIMG(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All attachment, OpenTK.Graphics.ES11.All textarget, UInt32 texture, Int32 level, Int32 samples) { throw new NotImplementedException(); }

        /// <summary>[requires: IMG_multisampled_render_to_texture]
        /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
        /// </summary>
        /// <param name="target"> 
        /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
        /// </param>
        /// <param name="samples"> 
        /// Specifies the number of samples to be used for the renderbuffer object's storage.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format to use for the renderbuffer object's image.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the renderbuffer, in pixels.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the renderbuffer, in pixels.
        /// </param>
        [AutoGenerated(Category = "IMG_multisampled_render_to_texture", Version = "", EntryPoint = "glRenderbufferStorageMultisampleIMG")]
        public static void RenderbufferStorageMultisampleIMG(OpenTK.Graphics.ES11.All target, Int32 samples, OpenTK.Graphics.ES11.All internalformat, Int32 width, Int32 height) { throw new NotImplementedException(); }

        #endregion

        #region Xamarin.iOS compatibility

        /// <summary>[requires: v1.0]
        /// Clear buffers to preset values
        /// </summary>
        /// <param name="mask"> 
        /// Bitwise OR of masks that indicate the buffers to be cleared. The three masks are ColorBufferBit, DepthBufferBit, and StencilBufferBit.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glClear")]
        public static void Clear(Int32 mask) { throw new NotImplementedException(); }

        #endregion
    }
}
