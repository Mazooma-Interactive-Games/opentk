//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2013 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to 
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

namespace OpenTK.Platform.Wayland
{
    using System;
    using System.Text;
    using System.Runtime.InteropServices;
    #pragma warning disable 3019
    #pragma warning disable 1591
    #pragma warning disable 1572
    #pragma warning disable 1573
    #pragma warning disable 626

    partial class Client
    {
        static Client()
        {
            EntryPointNames = new byte[]
            {
            };
            EntryPointNameOffsets = new int[]
            {
            };
            EntryPoints = new IntPtr[EntryPointNameOffsets.Length];
        }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="display"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlwl_display_cancel_read")]
        public static void wl_display_cancel_rea(wl_display display) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="name"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlwl_display_connect")]
        public static wl_display wl_display_connect(String name) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="fd"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlwl_display_connect_to_fd")]
        public static wl_display wl_display_connect_to_f(Int32 fd) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="display"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlwl_display_create_queue")]
        public static wl_event_queue wl_display_create_queue(wl_display display) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="display"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlwl_display_disconnect")]
        public static void wl_display_disconnect(wl_display display) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="display"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlwl_display_dispatch")]
        public static Int32 wl_display_dispatch(wl_display display) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="display"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlwl_display_dispatch_pending")]
        public static Int32 wl_display_dispatch_pending(wl_display display) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="display"></param>
        /// <param name="queue"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlwl_display_dispatch_queue")]
        public static Int32 wl_display_dispatch_queue(wl_display display, wl_event_queue queue) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="display"></param>
        /// <param name="queue"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlwl_display_dispatch_queue_pending")]
        public static Int32 wl_display_dispatch_queue_pending(wl_display display, wl_event_queue queue) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="display"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlwl_display_flush")]
        public static Int32 wl_display_flush(wl_display display) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="display"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlwl_display_get_error")]
        public static ErrorCode wl_display_get_error(wl_display display) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="display"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlwl_display_get_fd")]
        public static Int32 wl_display_get_f(wl_display display) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="display"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlwl_display_prepare_read")]
        public static Int32 wl_display_prepare_rea(wl_display display) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="display"></param>
        /// <param name="queue"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlwl_display_prepare_read_queue")]
        public static Int32 wl_display_prepare_read_queue(wl_display display, wl_event_queue queue) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="display"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlwl_display_read_events")]
        public static Int32 wl_display_read_events(wl_display display) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="display"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlwl_display_roundtrip")]
        public static Int32 wl_display_roundtrip(wl_display display) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="queue"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlwl_event_queue_destroy")]
        public static void wl_event_queue_destroy(wl_event_queue queue) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="handler"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlwl_log_set_handler_client")]
        public static void wl_log_set_handler_client(LogCallback handler) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="proxy"></param>
        /// <param name="dispatcher_func"></param>
        /// <param name="dispatcher_data"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlwl_proxy_add_dispatcher")]
        public static Int32 wl_proxy_add_dispatcher(wl_proxy proxy, DispatcherCallback dispatcher_func, IntPtr dispatcher_data, IntPtr data) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="proxy"></param>
        /// <param name="callback"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlwl_proxy_add_listener")]
        public static Int32 wl_proxy_add_listener(wl_proxy proxy, ListenerCallback callback, IntPtr data) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="proxy"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlwl_proxy_destroy")]
        public static void wl_proxy_destroy(wl_proxy proxy) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="proxy"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlwl_proxy_get_class")]
        [CLSCompliant(false)]
        public static unsafe char* wl_proxy_get_clas(wl_proxy proxy) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="proxy"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlwl_proxy_get_id")]
        public static Int32 wl_proxy_get_i(wl_proxy proxy) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="proxy"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlwl_proxy_get_listener")]
        public static IntPtr wl_proxy_get_listener(wl_proxy proxy) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="proxy"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlwl_proxy_get_user_data")]
        public static IntPtr wl_proxy_get_user_data(wl_proxy proxy) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="proxy"></param>
        /// <param name="opcode"></param>
        /// <param name="args"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlwl_proxy_marshal_array")]
        [CLSCompliant(false)]
        public static void wl_proxy_marshal_array(wl_proxy proxy, Int32 opcode, wl_argument[] args) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="proxy"></param>
        /// <param name="opcode"></param>
        /// <param name="args"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlwl_proxy_marshal_array")]
        [CLSCompliant(false)]
        public static void wl_proxy_marshal_array(wl_proxy proxy, Int32 opcode, ref wl_argument args) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="proxy"></param>
        /// <param name="opcode"></param>
        /// <param name="args"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlwl_proxy_marshal_array")]
        [CLSCompliant(false)]
        public static unsafe void wl_proxy_marshal_array(wl_proxy proxy, Int32 opcode, wl_argument* args) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="factory"></param>
        /// <param name="opcode"></param>
        /// <param name="args"></param>
        /// <param name="interface"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlwl_proxy_marshal_array_constructor")]
        [CLSCompliant(false)]
        public static wl_proxy wl_proxy_marshal_array_constructor(wl_proxy factory, Int32 opcode, wl_argument[] args, wl_interface @interface) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="factory"></param>
        /// <param name="opcode"></param>
        /// <param name="args"></param>
        /// <param name="interface"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlwl_proxy_marshal_array_constructor")]
        [CLSCompliant(false)]
        public static wl_proxy wl_proxy_marshal_array_constructor(wl_proxy factory, Int32 opcode, ref wl_argument args, wl_interface @interface) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="factory"></param>
        /// <param name="opcode"></param>
        /// <param name="args"></param>
        /// <param name="interface"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlwl_proxy_marshal_array_constructor")]
        [CLSCompliant(false)]
        public static unsafe wl_proxy wl_proxy_marshal_array_constructor(wl_proxy factory, Int32 opcode, wl_argument* args, wl_interface @interface) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="proxy"></param>
        /// <param name="queue"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlwl_proxy_set_queue")]
        public static void wl_proxy_set_queue(wl_proxy proxy, wl_event_queue queue) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="proxy"></param>
        /// <param name="user_data"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlwl_proxy_set_user_data")]
        public static void wl_proxy_set_user_data(wl_proxy proxy, IntPtr user_data) { throw new NotImplementedException(); }

        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void wlwl_display_cancel_read(wl_display display);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern wl_display wlwl_display_connect(IntPtr name);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern wl_display wlwl_display_connect_to_fd(Int32 fd);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern wl_event_queue wlwl_display_create_queue(wl_display display);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void wlwl_display_disconnect(wl_display display);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 wlwl_display_dispatch(wl_display display);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 wlwl_display_dispatch_pending(wl_display display);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 wlwl_display_dispatch_queue(wl_display display, wl_event_queue queue);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 wlwl_display_dispatch_queue_pending(wl_display display, wl_event_queue queue);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 wlwl_display_flush(wl_display display);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern ErrorCode wlwl_display_get_error(wl_display display);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 wlwl_display_get_fd(wl_display display);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 wlwl_display_prepare_read(wl_display display);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 wlwl_display_prepare_read_queue(wl_display display, wl_event_queue queue);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 wlwl_display_read_events(wl_display display);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 wlwl_display_roundtrip(wl_display display);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void wlwl_event_queue_destroy(wl_event_queue queue);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void wlwl_log_set_handler_client(LogCallback handler);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 wlwl_proxy_add_dispatcher(wl_proxy proxy, DispatcherCallback dispatcher_func, IntPtr dispatcher_data, IntPtr data);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 wlwl_proxy_add_listener(wl_proxy proxy, ListenerCallback callback, IntPtr data);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void wlwl_proxy_destroy(wl_proxy proxy);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe char* wlwl_proxy_get_class(wl_proxy proxy);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 wlwl_proxy_get_id(wl_proxy proxy);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern IntPtr wlwl_proxy_get_listener(wl_proxy proxy);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern IntPtr wlwl_proxy_get_user_data(wl_proxy proxy);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void wlwl_proxy_marshal_array(wl_proxy proxy, Int32 opcode, wl_argument* args);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe wl_proxy wlwl_proxy_marshal_array_constructor(wl_proxy factory, Int32 opcode, wl_argument* args, wl_interface @interface);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void wlwl_proxy_set_queue(wl_proxy proxy, wl_event_queue queue);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void wlwl_proxy_set_user_data(wl_proxy proxy, IntPtr user_data);
    }
}
