//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2013 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to 
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

namespace OpenTK.Platform.Wayland
{
    using System;
    using System.Text;
    using System.Runtime.InteropServices;
    #pragma warning disable 3019
    #pragma warning disable 1591
    #pragma warning disable 1572
    #pragma warning disable 1573
    #pragma warning disable 626

    partial class Client
    {
        static Client()
        {
            EntryPointNames = new byte[]
            {
            };
            EntryPointNameOffsets = new int[]
            {
            };
            EntryPoints = new IntPtr[EntryPointNameOffsets.Length];
        }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="display"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wldisplay_cancel_read")]
        public static void DisplayCancelRead(WaylandDisplay display) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="name"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wldisplay_connect")]
        public static WaylandDisplay DisplayConnect(String name) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="fd"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wldisplay_connect_to_fd")]
        public static WaylandDisplay DisplayConnectToFd(Int32 fd) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="display"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wldisplay_create_queue")]
        public static WaylandEventQueue DisplayCreateQueue(WaylandDisplay display) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="display"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wldisplay_disconnect")]
        public static void DisplayDisconnect(WaylandDisplay display) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="display"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wldisplay_dispatch")]
        public static Int32 DisplayDispatch(WaylandDisplay display) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="display"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wldisplay_dispatch_pending")]
        public static Int32 DisplayDispatchPending(WaylandDisplay display) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="display"></param>
        /// <param name="queue"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wldisplay_dispatch_queue")]
        public static Int32 DisplayDispatchQueue(WaylandDisplay display, WaylandEventQueue queue) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="display"></param>
        /// <param name="queue"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wldisplay_dispatch_queue_pending")]
        public static Int32 DisplayDispatchQueuePending(WaylandDisplay display, WaylandEventQueue queue) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="display"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wldisplay_flush")]
        public static Int32 DisplayFlush(WaylandDisplay display) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="display"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wldisplay_get_error")]
        public static OpenTK.Platform.Wayland.ErrorCode DisplayGetError(WaylandDisplay display) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="display"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wldisplay_get_fd")]
        public static Int32 DisplayGetFd(WaylandDisplay display) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="display"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wldisplay_prepare_read")]
        public static Int32 DisplayPrepareRead(WaylandDisplay display) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="display"></param>
        /// <param name="queue"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wldisplay_prepare_read_queue")]
        public static Int32 DisplayPrepareReadQueue(WaylandDisplay display, WaylandEventQueue queue) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="display"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wldisplay_read_events")]
        public static Int32 DisplayReadEvents(WaylandDisplay display) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="display"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wldisplay_roundtrip")]
        public static Int32 DisplayRoundtrip(WaylandDisplay display) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="queue"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlevent_queue_destroy")]
        public static void EventQueueDestroy(WaylandEventQueue queue) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="proxy"></param>
        /// <param name="dispatcher_func"></param>
        /// <param name="dispatcher_data"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlproxy_add_dispatcher")]
        public static Int32 ProxyAddDispatcher(WaylandProxy proxy, DispatcherCallback dispatcher_func, IntPtr dispatcher_data, IntPtr data) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="proxy"></param>
        /// <param name="callback"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlproxy_add_listener")]
        public static Int32 ProxyAddListener(WaylandProxy proxy, ListenerCallback callback, IntPtr data) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="proxy"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlproxy_destroy")]
        public static void ProxyDestroy(WaylandProxy proxy) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="proxy"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlproxy_get_class")]
        [CLSCompliant(false)]
        public static unsafe char* ProxyGetClas(WaylandProxy proxy) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="proxy"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlproxy_get_id")]
        public static Int32 ProxyGetI(WaylandProxy proxy) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="proxy"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlproxy_get_listener")]
        public static IntPtr ProxyGetListener(WaylandProxy proxy) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="proxy"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlproxy_get_user_data")]
        public static IntPtr ProxyGetUserData(WaylandProxy proxy) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="proxy"></param>
        /// <param name="opcode"></param>
        /// <param name="args"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlproxy_marshal_array")]
        [CLSCompliant(false)]
        public static void ProxyMarshalArray(WaylandProxy proxy, Int32 opcode, WaylandArgument[] @args) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="proxy"></param>
        /// <param name="opcode"></param>
        /// <param name="args"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlproxy_marshal_array")]
        [CLSCompliant(false)]
        public static void ProxyMarshalArray(WaylandProxy proxy, Int32 opcode, ref WaylandArgument @args) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="proxy"></param>
        /// <param name="opcode"></param>
        /// <param name="args"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlproxy_marshal_array")]
        [CLSCompliant(false)]
        public static unsafe void ProxyMarshalArray(WaylandProxy proxy, Int32 opcode, WaylandArgument* @args) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="factory"></param>
        /// <param name="opcode"></param>
        /// <param name="args"></param>
        /// <param name="interface"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlproxy_marshal_array_constructor")]
        [CLSCompliant(false)]
        public static WaylandProxy ProxyMarshalArrayConstructor(WaylandProxy factory, Int32 opcode, WaylandArgument[] @args, WaylandInterface @interface) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="factory"></param>
        /// <param name="opcode"></param>
        /// <param name="args"></param>
        /// <param name="interface"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlproxy_marshal_array_constructor")]
        [CLSCompliant(false)]
        public static WaylandProxy ProxyMarshalArrayConstructor(WaylandProxy factory, Int32 opcode, ref WaylandArgument @args, WaylandInterface @interface) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="factory"></param>
        /// <param name="opcode"></param>
        /// <param name="args"></param>
        /// <param name="interface"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlproxy_marshal_array_constructor")]
        [CLSCompliant(false)]
        public static unsafe WaylandProxy ProxyMarshalArrayConstructor(WaylandProxy factory, Int32 opcode, WaylandArgument* @args, WaylandInterface @interface) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="proxy"></param>
        /// <param name="queue"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlproxy_set_queue")]
        public static void ProxySetQueue(WaylandProxy proxy, WaylandEventQueue queue) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.5]</summary>
        /// <param name="proxy"></param>
        /// <param name="user_data"></param>
        [AutoGenerated(Category = "", Version = "1.5", EntryPoint = "wlproxy_set_user_data")]
        public static void ProxySetUserData(WaylandProxy proxy, IntPtr user_data) { throw new NotImplementedException(); }

        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void wldisplay_cancel_read(WaylandDisplay display);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern WaylandDisplay wldisplay_connect(IntPtr name);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern WaylandDisplay wldisplay_connect_to_fd(Int32 fd);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern WaylandEventQueue wldisplay_create_queue(WaylandDisplay display);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void wldisplay_disconnect(WaylandDisplay display);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 wldisplay_dispatch(WaylandDisplay display);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 wldisplay_dispatch_pending(WaylandDisplay display);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 wldisplay_dispatch_queue(WaylandDisplay display, WaylandEventQueue queue);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 wldisplay_dispatch_queue_pending(WaylandDisplay display, WaylandEventQueue queue);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 wldisplay_flush(WaylandDisplay display);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern System.Int32 wldisplay_get_error(WaylandDisplay display);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 wldisplay_get_fd(WaylandDisplay display);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 wldisplay_prepare_read(WaylandDisplay display);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 wldisplay_prepare_read_queue(WaylandDisplay display, WaylandEventQueue queue);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 wldisplay_read_events(WaylandDisplay display);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 wldisplay_roundtrip(WaylandDisplay display);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void wlevent_queue_destroy(WaylandEventQueue queue);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 wlproxy_add_dispatcher(WaylandProxy proxy, DispatcherCallback dispatcher_func, IntPtr dispatcher_data, IntPtr data);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 wlproxy_add_listener(WaylandProxy proxy, ListenerCallback callback, IntPtr data);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void wlproxy_destroy(WaylandProxy proxy);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe char* wlproxy_get_class(WaylandProxy proxy);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 wlproxy_get_id(WaylandProxy proxy);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern IntPtr wlproxy_get_listener(WaylandProxy proxy);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern IntPtr wlproxy_get_user_data(WaylandProxy proxy);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void wlproxy_marshal_array(WaylandProxy proxy, Int32 opcode, WaylandArgument* @args);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe WaylandProxy wlproxy_marshal_array_constructor(WaylandProxy factory, Int32 opcode, WaylandArgument* @args, WaylandInterface @interface);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void wlproxy_set_queue(WaylandProxy proxy, WaylandEventQueue queue);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void wlproxy_set_user_data(WaylandProxy proxy, IntPtr user_data);
    }
}
